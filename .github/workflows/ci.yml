name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: |
        cd shared && go mod download
        cd ../auth-service && go mod download
        cd ../blog-service && go mod download
        cd ../media-service && go mod download
    
    - name: Run tests - Auth Service
      run: |
        cd auth-service
        go test -v ./...
    
    - name: Run tests - Blog Service
      run: |
        cd blog-service
        go test -v ./...
    
    - name: Run tests - Media Service
      run: |
        cd media-service
        go test -v ./...
    
    - name: Run tests - Shared
      run: |
        cd shared
        go test -v ./...

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Build Auth Service
      run: |
        cd auth-service
        go build -o bin/auth-service cmd/server/main.go
    
    - name: Build Blog Service
      run: |
        cd blog-service
        go build -o bin/blog-service cmd/server/main.go
    
    - name: Build Media Service
      run: |
        cd media-service
        go build -o bin/media-service cmd/server/main.go
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: microblog-binaries
        path: |
          auth-service/bin/
          blog-service/bin/
          media-service/bin/

  docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Auth Service
      uses: docker/build-push-action@v5
      with:
        context: ./auth-service
        file: ./auth-service/deployments/Dockerfile
        push: true
        tags: |
          hatefbarari/microblog-auth:latest
          hatefbarari/microblog-auth:${{ github.sha }}
    
    - name: Build and push Blog Service
      uses: docker/build-push-action@v5
      with:
        context: ./blog-service
        file: ./blog-service/deployments/Dockerfile
        push: true
        tags: |
          hatefbarari/microblog-blog:latest
          hatefbarari/microblog-blog:${{ github.sha }}
    
    - name: Build and push Media Service
      uses: docker/build-push-action@v5
      with:
        context: ./media-service
        file: ./media-service/deployments/Dockerfile
        push: true
        tags: |
          hatefbarari/microblog-media:latest
          hatefbarari/microblog-media:${{ github.sha }}

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
